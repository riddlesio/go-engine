// Copyright 2015 theaigames.com (developers@theaigames.com)

//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at

//        http://www.apache.org/licenses/LICENSE-2.0

//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//	
//    For the full copyright and license information, please view the LICENSE
//    file that was distributed with this source code.

package com.theaigames.connections;

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.net.URL;
import java.util.Properties;
import java.util.zip.GZIPInputStream;
import java.util.zip.GZIPOutputStream;

import com.amazonaws.auth.AWSCredentials;
import com.amazonaws.auth.BasicAWSCredentials;

import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.AmazonS3Client;
import com.amazonaws.services.s3.model.PutObjectRequest;
import com.amazonaws.services.s3.model.ObjectMetadata;
import com.amazonaws.services.s3.model.CannedAccessControlList;
import com.amazonaws.services.s3.model.S3Object;

import com.amazonaws.ClientConfiguration;
import com.amazonaws.Protocol;

/**
 * Amazon class
 * 
 * DO NOT EDIT THIS FILE
 * 
 * Handles all reading from and writing to the Amazon S3 Client
 * 
 * @author Jim van Eeden <jim@starapple.nl>
 */

public final class Amazon {
	
	private static String accessKey, secretKey;
	private static AmazonS3 s3;
	
	private static final String BUCKET_NAME = "theaigames";

	private Amazon() {}
	
	/**
	 * Connects to the Amazon S3 Client. Properties file must be included in
	 * build path for this to work
	 */
	public static void connectToAmazon() {
		
		Properties prop = new Properties();
		
		// read properties file that contains the keys
		try {
			File jarPath = new File(Amazon.class.getProtectionDomain().getCodeSource().getLocation().getPath());
			String propertiesPath = jarPath.getParentFile().getAbsolutePath();
			prop.load(new FileInputStream(propertiesPath + "/amazon.properties"));
//			prop.load(new FileInputStream("amazon.properties")); //FOR ECLIPSE
			
			accessKey = prop.getProperty("accessKey");
			secretKey = prop.getProperty("secretKey");
		} catch (Exception ex) {
			throw new RuntimeException("Couldn't read properties file");
		}
		
		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secretKey);

		ClientConfiguration clientConfig = new ClientConfiguration();
		clientConfig.setProtocol(Protocol.HTTP);

		s3 = new AmazonS3Client(credentials, clientConfig);
		s3.setEndpoint("s3-eu-west-1.amazonaws.com");
	}
	
	/**
	 * Inflates and reads a file from our Amazon given a location of the file
	 * @param filePath : file path
	 * @return : the string of the file contents
	 */
	public static String readAmazonFile(String filePath) throws IOException, RuntimeException {
		
		System.out.println("Reading file from Amazon...");
		
		String data = "";
		
		if(s3 == null)
			throw new RuntimeException("Connection to Amazon s3 Client isn't established yet. Run Amazon.connectToAmazon() first.");
		
		try {
			URL url = new URL(filePath);
			String bucket = url.getPath().substring(1).split("/")[0];
			String key = url.getPath().substring(2 + bucket.length());

			S3Object s3obj = s3.getObject(bucket, key);
			
			GZIPInputStream gzis = new GZIPInputStream(new BufferedInputStream(s3obj.getObjectContent()));
			BufferedReader bf = new BufferedReader(new InputStreamReader(gzis));

			String line;
			while((line = bf.readLine()) != null) {
				data += line;
			}
		} catch (IOException ex) {
			throw new IOException(String.format("Error reading file %s from Amazon S3 Client: %s", filePath, ex));
		}
		
		return data;
	}
	
	/**
	 * Compresses a string and stores it in a file on Amazon
	 * @param data : data to be stored
	 * @param outFile : name of the file to store data to
	 * @return : full path of the file
	 */
	public static String saveToAmazon(String data, String outFile)
	{
		try {
			ByteArrayOutputStream baos = new ByteArrayOutputStream();
			Writer writer = new OutputStreamWriter(baos);
			writer.write(data);
			writer.flush();
			writer.close();

			byte[] zippedBytes = compressGZip(baos.toByteArray());

			ObjectMetadata omd = new ObjectMetadata();
			omd.setContentLength(zippedBytes.length);

			PutObjectRequest putObj = new PutObjectRequest(BUCKET_NAME, outFile, new ByteArrayInputStream(zippedBytes), omd);
			putObj.setCannedAcl(CannedAccessControlList.PublicRead);

			s3.putObject(putObj);
			String amazonLink = String.format("https://s3-eu-west-1.amazonaws.com/%s/", BUCKET_NAME);

			return amazonLink + outFile;
		}
		catch(IOException e) {
			System.out.println(e);
			return "";
		}
	}
	
	/** 
	 * Compresses a byte array with GZIP
	 * @param bytes : input byte array
	 * @return : compressed byte array
	 */
	private static byte[] compressGZip(byte[] bytes) throws IOException
	{
		try {
			ByteArrayOutputStream baos = new ByteArrayOutputStream();
			GZIPOutputStream gzos = new GZIPOutputStream(baos);

			gzos.write(bytes, 0, bytes.length);
			gzos.finish();
			gzos.close();

			return baos.toByteArray();
		}
		catch(IOException e) {
			throw e;
		}
	}
}
